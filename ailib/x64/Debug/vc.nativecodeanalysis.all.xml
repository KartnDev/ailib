<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>4</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'KNeighborsClassifier::trainPointDim' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::{ctor}</FUNCTION>
    <DECORATED>??0KNeighborsClassifier@@QEAA@XZ</DECORATED>
    <FUNCLINE>4</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'KNeighborsClassifier::trainPointDim' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::{ctor}</FUNCTION>
    <DECORATED>??0KNeighborsClassifier@@QEAA@H@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QEAAHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>77</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QEAA?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>67</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQEAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQEAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QEAANV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QEAANV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'ktstd::FileUtilities::CSV::lenght' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::{ctor}</FUNCTION>
    <DECORATED>??0CSV@FileUtilities@ktstd@@QEAA@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>