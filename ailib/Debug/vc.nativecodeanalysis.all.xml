<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>4</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'KNeighborsClassifier::trainPointDim' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::{ctor}</FUNCTION>
    <DECORATED>??0KNeighborsClassifier@@QAE@XZ</DECORATED>
    <FUNCLINE>4</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>4</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor may not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::{ctor}</FUNCTION>
    <DECORATED>??0KNeighborsClassifier@@QAE@XZ</DECORATED>
    <FUNCLINE>4</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'KNeighborsClassifier::trainPointDim' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::{ctor}</FUNCTION>
    <DECORATED>??0KNeighborsClassifier@@QAE@H@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'KNeighborsClassifier::KNeighborsClassifier' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::{ctor}</FUNCTION>
    <DECORATED>??0KNeighborsClassifier@@QAE@H@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>19</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Fit</FUNCTION>
    <DECORATED>?Fit@KNeighborsClassifier@@QAEXV?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@std@@V?$vector@HV?$allocator@H@std@@@3@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>49</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function '&lt;lambda_c61adbac58c2f1a47fc2621bbb62cae2&gt;::operator()' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict::&lt;lambda_c61adbac58c2f1a47fc2621bbb62cae2&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_c61adbac58c2f1a47fc2621bbb62cae2&gt;@@QBE_NABU?$pair@HH@std@@0@Z</DECORATED>
    <FUNCLINE>49</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'current_p' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>58</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'mostCommonNearestModel' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>32</LINE>
      <COLUMN>8</COLUMN>
    </SFA>
    <DEFECTCODE>26494</DEFECTCODE>
    <DESCRIPTION>Variable 'dist' is uninitialized. Always initialize an object (type.5).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>37</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>55</LINE>
      <COLUMN>56</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>55</LINE>
      <COLUMN>63</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>27</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>97</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function '&lt;lambda_277c54c2eef3ed7597236683ce3ca3f5&gt;::operator()' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict::&lt;lambda_277c54c2eef3ed7597236683ce3ca3f5&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_277c54c2eef3ed7597236683ce3ca3f5&gt;@@QBE_NABU?$pair@HH@std@@0@Z</DECORATED>
    <FUNCLINE>97</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>101</LINE>
      <COLUMN>14</COLUMN>
    </SFA>
    <DEFECTCODE>6246</DEFECTCODE>
    <DESCRIPTION>Локальное объявление "i" скрывает объявление того же имени во внешней области. Дополнительные сведения см. в предыдущем объявлении в строке "72" файла "c:\users\dmitry\documents\github\ailib\ailib\kneighborsclassifier.cpp".</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
        <FILENAME>kneighborsclassifier.cpp</FILENAME>
        <LINE>72</LINE>
        <COLUMN>13</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>90</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'current_p' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>106</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'mostCommonNearestModel' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>80</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: '&amp;current'. 'current' may have been invalidated at line 80 (lifetime.1).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
        <FILENAME>kneighborsclassifier.cpp</FILENAME>
        <LINE>80</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>99</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: '&amp;NearestModels'. 'NearestModels' may have been invalidated at line 99 (lifetime.1).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
        <FILENAME>kneighborsclassifier.cpp</FILENAME>
        <LINE>99</LINE>
        <COLUMN>27</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>79</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26494</DEFECTCODE>
    <DESCRIPTION>Variable 'dist' is uninitialized. Always initialize an object (type.5).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>85</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>88</LINE>
      <COLUMN>54</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>103</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::Predict</FUNCTION>
    <DECORATED>?Predict@KNeighborsClassifier@@QAE?AV?$vector@HV?$allocator@H@std@@@std@@V?$vector@V?$vector@HV?$allocator@H@std@@@std@@V?$allocator@V?$vector@HV?$allocator@H@std@@@std@@@2@@3@@Z</DECORATED>
    <FUNCLINE>66</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>kneighborsclassifier.cpp</FILENAME>
      <LINE>122</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'Position' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>KNeighborsClassifier::FindMostCommon</FUNCTION>
    <DECORATED>?FindMostCommon@KNeighborsClassifier@@AAEHV?$vector@HV?$allocator@H@std@@@std@@@Z</DECORATED>
    <FUNCLINE>115</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 'point1' for function 'ktstd::Math::StdEuclideanDist' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'point1' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'point1': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::GetMinkowskiDistance</FUNCTION>
    <DECORATED>?GetMinkowskiDistance@Math@ktstd@@SANV?$vector@HV?$allocator@H@std@@@std@@0N@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::GetMinkowskiDistance</FUNCTION>
    <DECORATED>?GetMinkowskiDistance@Math@ktstd@@SANV?$vector@HV?$allocator@H@std@@@std@@0N@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>9</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'ktstd::FileUtilities::CSV::lenght' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::{ctor}</FUNCTION>
    <DECORATED>??0CSV@FileUtilities@ktstd@@QAE@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>9</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>14</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'ktstd::FileUtilities::CSV::Size' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::Size</FUNCTION>
    <DECORATED>?Size@CSV@FileUtilities@ktstd@@QAEHXZ</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>59</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: '&amp;a'. 'a' may have been invalidated at line 59 (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
        <FILENAME>fileutilities.cpp</FILENAME>
        <LINE>59</LINE>
        <COLUMN>30</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>38</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>72</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>50</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>56</LINE>
      <COLUMN>49</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>56</LINE>
      <COLUMN>52</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>59</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>59</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::CSV::_QueryForBytes</FUNCTION>
    <DECORATED>?_QueryForBytes@CSV@FileUtilities@ktstd@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>29</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>73</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::SplitString</FUNCTION>
    <DECORATED>?SplitString@FileUtilities@ktstd@@QAE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@D@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>80</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::SplitString</FUNCTION>
    <DECORATED>?SplitString@FileUtilities@ktstd@@QAE?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@D@Z</DECORATED>
    <FUNCLINE>65</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>88</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'ktstd::FileUtilities::FileExists' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::FileExists</FUNCTION>
    <DECORATED>?FileExists@FileUtilities@ktstd@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>88</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>106</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'length' is assigned only once, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::ReadFileBinary</FUNCTION>
    <DECORATED>?ReadFileBinary@FileUtilities@ktstd@@QAEPBDPBD@Z</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>127</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::ReadFileBinary</FUNCTION>
    <DECORATED>?ReadFileBinary@FileUtilities@ktstd@@QAEPBDPBD@Z</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::ReadFileBinary</FUNCTION>
    <DECORATED>?ReadFileBinary@FileUtilities@ktstd@@QAEPBDPBD@Z</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>fileutilities.cpp</FILENAME>
      <LINE>110</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26400</DEFECTCODE>
    <DESCRIPTION>Do not assign the result of an allocation or a function call with an owner&lt;T&gt; return value to a raw pointer, use owner&lt;T&gt; instead (i.11).</DESCRIPTION>
    <FUNCTION>ktstd::FileUtilities::ReadFileBinary</FUNCTION>
    <DECORATED>?ReadFileBinary@FileUtilities@ktstd@@QAEPBDPBD@Z</DECORATED>
    <FUNCLINE>98</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>