<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>32</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function '&lt;lambda_f8f77e05ff693e21b14e5afcba62da35&gt;::operator()' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK::&lt;lambda_f8f77e05ff693e21b14e5afcba62da35&gt;::()</FUNCTION>
    <DECORATED>??R&lt;lambda_f8f77e05ff693e21b14e5afcba62da35&gt;@@QBEIV?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@0@Z</DECORATED>
    <FUNCLINE>32</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>20</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: '&amp;this-&gt;trainData'. 'this.ktstd::models::KNearestNeighbors::trainData' may have been invalidated at line 24 (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>24</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: '&amp;this-&gt;trainData'. 'this.ktstd::models::KNearestNeighbors::trainData' may have been invalidated at line 24 (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>24</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: '*result.[]'. 'return of '[]'' may have been invalidated at line 24 (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>24</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: 'result.[]'. '{InvalidLoc}' may have been invalidated at line 24 (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>24</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26486</DEFECTCODE>
    <DESCRIPTION>Don't pass a pointer that may be invalid to a function. Parameter 1 '{InvalidLoc}' in call to 'std::tuple&lt;std::vector&lt;double,std::allocator&lt;double&gt; &gt;,double,double&gt;::tuple&lt;std::vector&lt;double,std::allocator&lt;double&gt; &gt;,double,double&gt;&lt;std::vector&lt;double,std::allocator&lt;double&gt; &gt; const &amp;,double &amp;,double const &amp;,0&gt;' may be invalid (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>24</LINE>
        <COLUMN>19</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>41</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26489</DEFECTCODE>
    <DESCRIPTION>Don't dereference a pointer that may be invalid: 'result.GetNearestK'. 'return of 'GetNearestK'' may have been invalidated at line 39 (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>39</LINE>
        <COLUMN>1</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>39</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26487</DEFECTCODE>
    <DESCRIPTION>Don't return a pointer that may be invalid (lifetime.1).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
        <FILENAME>ailib.cpp</FILENAME>
        <LINE>39</LINE>
        <COLUMN>1</COLUMN>
      </SFA>
    </PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>22</LINE>
      <COLUMN>66</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>37</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\source\repos\ailib\ailib</FILEPATH>
      <FILENAME>ailib.cpp</FILENAME>
      <LINE>16</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26460</DEFECTCODE>
    <DESCRIPTION>The reference argument 'testData' for function 'ktstd::models::KNearestNeighbors::GetNearestK' can be marked as const (con.3).</DESCRIPTION>
    <FUNCTION>ktstd::models::KNearestNeighbors::GetNearestK</FUNCTION>
    <DECORATED>?GetNearestK@KNearestNeighbors@models@ktstd@@QBEPAV?$vector@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@V?$allocator@V?$tuple@V?$vector@NV?$allocator@N@std@@@std@@NN@std@@@2@@std@@AAV?$vector@NV?$allocator@N@std@@@5@@Z</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>