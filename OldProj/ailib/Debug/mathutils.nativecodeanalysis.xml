<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 'point1' for function 'ktstd::Math::StdEuclideanDist' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26461</DEFECTCODE>
    <DESCRIPTION>The pointer argument 'point2' for function 'ktstd::Math::StdEuclideanDist' can be marked as a pointer to const (con.3).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'point1' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26429</DEFECTCODE>
    <DESCRIPTION>Symbol 'point2' is never tested for nullness, it can be marked as not_null (f.23).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'point1': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>5</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26485</DEFECTCODE>
    <DESCRIPTION>Expression 'point2': No array to pointer decay (bounds.3).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>6</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>33</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>10</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@SANQAH0H@Z</DECORATED>
    <FUNCLINE>5</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>31</LINE>
      <COLUMN>26</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>45</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>57</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>24</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>ktstd::Math::StdEuclideanDist</FUNCTION>
    <DECORATED>?StdEuclideanDist@Math@ktstd@@QAENV?$vector@HV?$allocator@H@std@@@std@@0@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::GetMinkowskiDistance</FUNCTION>
    <DECORATED>?GetMinkowskiDistance@Math@ktstd@@SANV?$vector@HV?$allocator@H@std@@@std@@0N@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>c:\users\dmitry\documents\github\ailib\ailib</FILEPATH>
      <FILENAME>mathutils.cpp</FILENAME>
      <LINE>42</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26446</DEFECTCODE>
    <DESCRIPTION>Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).</DESCRIPTION>
    <FUNCTION>ktstd::Math::GetMinkowskiDistance</FUNCTION>
    <DECORATED>?GetMinkowskiDistance@Math@ktstd@@SANV?$vector@HV?$allocator@H@std@@@std@@0N@Z</DECORATED>
    <FUNCLINE>35</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>